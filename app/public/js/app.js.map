{"version":3,"sources":["app.js","components/shared/apiService.js","components/colorPicker/src/ColorPickerCtrl.js","components/colorPicker/src/colorHelper.js","components/colorPicker/src/colorPicker.js","components/config/src/config.js","components/config/src/currentEnvService.js","components/config/src/envService.js","templates.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvDA","file":"app.js","sourcesContent":["'use strict';\n\nangular.module('app', [\n  'ui.router',\n  'angularSpectrumColorpicker'\n]);\n","\"use strict\";\n\nangular.module('app').factory('apiService', function (\n  $http,\n  CONFIG,\n  envService\n) {\n  var LIGHTS_URL = envService.apiBase() + \"lights/\";\n\n  function getUrl(lightId) {\n    return LIGHTS_URL + lightId;\n  }\n\n  return {\n    updateLight: function(lightId, red, green, blue) {\n      var url = getUrl(lightId);\n\n      return $http.post(url, {\n        r: red,\n        g: green,\n        b: blue\n      });\n    },\n    currentState: function(lightId) {\n      var url = getUrl(lightId);\n\n      return $http.get(url, {\n        timeout: CONFIG.getStateTimeout\n      });\n    }\n  };\n});\n","\"use strict\";\n\nangular.module('app').controller('ColorPickerCtrl', function(\n  $scope,\n  $timeout,\n  apiService,\n  colorHelper,\n\n  light1Color,\n  light2Color\n) {\n  $scope.settings = {\n    light1: light1Color,\n    light2: light2Color\n  };\n\n  $timeout(function() {\n    $(\".color-picker-1 .sp-choose\").click(function() {\n      var color = colorHelper.rgbToObject($scope.settings.light1);\n\n      apiService.updateLight(1, color.r, color.g, color.b);\n    });\n\n    $(\".color-picker-2 .sp-choose\").click(function() {\n      var color = colorHelper.rgbToObject($scope.settings.light2);\n\n      apiService.updateLight(2, color.r, color.g, color.b);\n    });\n  });\n});","\"use strict\";\n\n/**\n * Color helper methods\n */\nangular.module('app').factory('colorHelper', function() {\n  var colorHelper = {};\n\n  /**\n   * Convert color object to rgb string\n   *\n   * @param  {Object} color Object in the format:\n   *   {\n   *     r: 1,\n   *     g: 2,\n   *     b: 3\n   *    }\n   *\n   * @return {String} rgbString eg, rgb(1, 2, 3)\n   */\n  colorHelper.objectToRGB = function(color) {\n    return \"rgb(\" + color.r + \", \" + color.g + \", \" + color.b + \")\";\n  };\n\n  /**\n   * Parse colour into an object\n   *\n   * @param  {String} colorRGBString Color settings as a \"rgb(r ,g, b)\" value\n   * @return {Object} Parsed color object in the form:\n   *\n   * {\n   *   r: 1,\n   *   g: 2,\n   *   b: 3\n   * }\n   */\n  colorHelper.rgbToObject = function(colorRGBString) {\n    var color = {};\n    var colorRegex = /rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/;\n\n    var matches = colorRGBString.match(colorRegex);\n\n    if (matches) {\n      color.r = parseInt(matches[1], 10);\n      color.g = parseInt(matches[2], 10);\n      color.b = parseInt(matches[3], 10);\n    }\n\n    return color;\n  };\n\n  return colorHelper;\n\n});","\"use strict\";\n\nangular.module('app').config(function(\n  $stateProvider,\n  $urlRouterProvider\n) {\n  // Color to use when color calls fail\n  var fallbackColor = \"rgb(0, 0, 0)\";\n\n  function getLightColor(lightId, $q, apiService, colorHelper) {\n    var deferred = $q.defer();\n\n    apiService.currentState(lightId).then(function(resp) {\n      var color = colorHelper.objectToRGB(resp.data.message);\n      deferred.resolve(color);\n    }).catch(function(error) {\n      console.log(\"Can't get light 2\", error);\n      deferred.resolve(fallbackColor);\n    });\n\n    return deferred.promise;\n  }\n\n  // Redirect to root if unknown url\n  $urlRouterProvider.otherwise('/');\n\n  $stateProvider\n    .state('colorPicker', {\n      templateUrl: 'components/colorPicker/templates/colorPicker.html',\n      url: '/',\n      controller: 'ColorPickerCtrl',\n      resolve: {\n        light1Color: function(\n          $q,\n          apiService,\n          colorHelper\n        ) {\n          return getLightColor(\"1\", $q, apiService, colorHelper);\n        },\n        light2Color: function(\n          $q,\n          apiService,\n          colorHelper\n        ) {\n          return getLightColor(\"2\", $q, apiService, colorHelper);\n        }\n      }\n    }\n  );\n});","\"use strict\";\n\n/**\n * Configuration object\n */\nangular.module('app')\n\n/**\n * A mapping of environments to hostnames. The application\n * uses the hostnames (values) to determine which\n * environment it is in.\n *\n * @constant {Object}\n */\n.constant('ENV_HOSTNAMES', {\n  // Local development\n  dev: \"localhost\",\n\n  production: \"peacehack.herokuapp.com\"\n})\n\n/**\n * Configuration object to store all the different\n * environment options\n *\n * Options that override the default:\n *\n * * `apiBase` {String} - by default `apiBase` would be the\n * hostname, but this option overrides it. NOTE: Use the\n * full form of the url ie, http://hello.com (trailing /\n * will be added if missing)\n *\n * @constant {Object}\n */\n.constant('ENV_OPTIONS', {\n  dev: {\n    apiBase: \"http://localhost:7790/\"\n  },\n  devServer: {\n  },\n  preProduction: {\n  },\n  production: {\n  }\n})\n\n/**\n * Global configuration object\n *\n * @constant {Object} CONFIG\n */\n.constant('CONFIG', {\n  /**\n   * Timeout for getting the state of a device\n   * @type {Number}\n   */\n  getStateTimeout: 1000\n});\n","/**\n * currentEnvService\n *\n * Get the current environment based on the current hostname\n *\n * @return {String} Current environment. `undefined` if not found\n */\nangular.module('app').factory('currentEnvService', function(\n  $window,\n  ENV_HOSTNAMES\n) {\n  \"use strict\";\n\n  var hostname = $window.location.hostname;\n  var environment = _.reduce(ENV_HOSTNAMES, function(memo, value, env) {\n    // Only find first environment that matches\n    if (memo) { return memo; }\n\n    var foundEnv;\n    if (_.isArray(value)) {\n      if (_.contains(value, hostname)) {\n        foundEnv = env;\n      }\n    } else {\n      if (value === hostname) {\n        foundEnv = env;\n      }\n    }\n\n    return foundEnv;\n  }, undefined);\n\n  return environment;\n});","/**\n * envService\n *\n * Environment singleton object to get environment\n * options.\n */\nangular.module('app').factory('envService', function(\n  $window,\n  ENV_OPTIONS,\n  currentEnvService\n) {\n  \"use strict\";\n\n  return {\n    /**\n     * Get environment option from `ENV_OPTIONS`\n     * hash.\n     *\n     * @param {String} Option to get\n     * @return {String|Object} Environment object\n     */\n    option: function(opt) {\n      if (!currentEnvService) { return; }\n\n      var envOptions = ENV_OPTIONS[currentEnvService];\n      if (!envOptions) { return; }\n\n      return envOptions[opt];\n    },\n\n    /**\n     * Get the api base url (with trailing /). This is the\n     * base url as the api base unless it is overriden in\n     * `ENV_OPTIONS`.\n     *\n     * @return {String} Base url\n     */\n    apiBase: function() {\n      var apiBaseOverride = this.option('apiBase');\n      var output;\n\n      if (apiBaseOverride) {\n        output = apiBaseOverride;\n      } else {\n        output = $window.location.protocol + \"//\" + $window.location.hostname + ($window.location.port ? ':' + $window.location.port: '') + \"/\";\n      }\n\n      // Append trailing / if it is missing\n      if (!output.match(/\\/$/)) {\n        output = output + \"/\";\n      }\n\n      return output;\n    }\n  };\n});","angular.module(\"app\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"components/colorPicker/templates/colorPicker.html\",\"<div class=\\\"color-picker-page\\\">\\n  <div class=\\\"light-container\\\">\\n    <h2>Light 1\\n      <span class=\\\"color-display\\\">{{ settings.light1 }}</span></h2>\\n\\n    <spectrum-colorpicker\\n      ng-model=\\\"settings.light1\\\"\\n      options=\\\"{ containerClassName: \\'color-picker-1\\', replacerClassName: \\'color-picker-1-selector\\' }\\\"\\n      format=\\\"\\'rgb\\'\\\"></spectrum-colorpicker>\\n  </div>\\n</div>\");}]);"],"sourceRoot":"/source/"}